{"name": "test_soucedemo_login_page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'url' must be a string\n  (Session info: chrome=138.0.7204.169)\nStacktrace:\n0   chromedriver                        0x0000000105227570 cxxbridge1$str$ptr + 2731064\n1   chromedriver                        0x000000010521f468 cxxbridge1$str$ptr + 2698032\n2   chromedriver                        0x0000000104d6e3f8 cxxbridge1$string$len + 90664\n3   chromedriver                        0x0000000104df763c cxxbridge1$string$len + 652396\n4   chromedriver                        0x0000000104df6b1c cxxbridge1$string$len + 649548\n5   chromedriver                        0x0000000104da9a0c cxxbridge1$string$len + 333884\n6   chromedriver                        0x00000001051ea5f4 cxxbridge1$str$ptr + 2481340\n7   chromedriver                        0x00000001051ed85c cxxbridge1$str$ptr + 2494244\n8   chromedriver                        0x00000001051cb248 cxxbridge1$str$ptr + 2353424\n9   chromedriver                        0x00000001051ee118 cxxbridge1$str$ptr + 2496480\n10  chromedriver                        0x00000001051bc2f8 cxxbridge1$str$ptr + 2292160\n11  chromedriver                        0x000000010520e00c cxxbridge1$str$ptr + 2627284\n12  chromedriver                        0x000000010520e198 cxxbridge1$str$ptr + 2627680\n13  chromedriver                        0x000000010521f0a4 cxxbridge1$str$ptr + 2697068\n14  libsystem_pthread.dylib             0x00000001962c32e4 _pthread_start + 136\n15  libsystem_pthread.dylib             0x00000001962be0fc thread_start + 8", "trace": "setup_driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e4920d3e103efd6f1e99d72ce2f8e040\")>, base_url = None\n\n    def test_soucedemo_login_page(setup_driver, base_url):\n        login_page = SoucedemoLoginPage(setup_driver, base_url)\n>       login_page.go_to()\n\ntests/test_soucedemo_login_page.py:6: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/soucedemo_login_page.py:12: in go_to\n    self.driver.get(self.base_url)\n../../venv/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:479: in get\n    self.execute(Command.GET, {\"url\": url})\n../../venv/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:454: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x102a76ba0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: \\'url\\' must be a string\\\\...0001962c32e4 _pthread_start + 136\\\\n15  libsystem_pthread.dylib             0x00000001962be0fc thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'url' must be a string\nE         (Session info: chrome=138.0.7204.169)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000105227570 cxxbridge1$str$ptr + 2731064\nE       1   chromedriver                        0x000000010521f468 cxxbridge1$str$ptr + 2698032\nE       2   chromedriver                        0x0000000104d6e3f8 cxxbridge1$string$len + 90664\nE       3   chromedriver                        0x0000000104df763c cxxbridge1$string$len + 652396\nE       4   chromedriver                        0x0000000104df6b1c cxxbridge1$string$len + 649548\nE       5   chromedriver                        0x0000000104da9a0c cxxbridge1$string$len + 333884\nE       6   chromedriver                        0x00000001051ea5f4 cxxbridge1$str$ptr + 2481340\nE       7   chromedriver                        0x00000001051ed85c cxxbridge1$str$ptr + 2494244\nE       8   chromedriver                        0x00000001051cb248 cxxbridge1$str$ptr + 2353424\nE       9   chromedriver                        0x00000001051ee118 cxxbridge1$str$ptr + 2496480\nE       10  chromedriver                        0x00000001051bc2f8 cxxbridge1$str$ptr + 2292160\nE       11  chromedriver                        0x000000010520e00c cxxbridge1$str$ptr + 2627284\nE       12  chromedriver                        0x000000010520e198 cxxbridge1$str$ptr + 2627680\nE       13  chromedriver                        0x000000010521f0a4 cxxbridge1$str$ptr + 2697068\nE       14  libsystem_pthread.dylib             0x00000001962c32e4 _pthread_start + 136\nE       15  libsystem_pthread.dylib             0x00000001962be0fc thread_start + 8\n\n../../venv/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidArgumentException"}, "start": 1753512326616, "stop": 1753512326623, "uuid": "b974ab05-0679-4f7e-9c0b-30ba9b6cf383", "historyId": "a9ce232ee1a72c812e4604f875d56223", "testCaseId": "a9ce232ee1a72c812e4604f875d56223", "fullName": "tests.test_soucedemo_login_page#test_soucedemo_login_page", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_soucedemo_login_page"}, {"name": "host", "value": "ahmads-MacBook-Pro.local"}, {"name": "thread", "value": "66875-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_soucedemo_login_page"}], "titlePath": ["tests", "test_soucedemo_login_page.py"]}